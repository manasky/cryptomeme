// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"cryptolist/common"
	"cryptolist/internal/ent/marketchart"
	"cryptolist/internal/ent/markets"
	"cryptolist/internal/ent/predicate"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMarketChart = "MarketChart"
	TypeMarkets     = "Markets"
)

// MarketChartMutation represents an operation that mutates the MarketChart nodes in the graph.
type MarketChartMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	currency      *string
	chart         *common.MarketChart
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MarketChart, error)
	predicates    []predicate.MarketChart
}

var _ ent.Mutation = (*MarketChartMutation)(nil)

// marketchartOption allows management of the mutation configuration using functional options.
type marketchartOption func(*MarketChartMutation)

// newMarketChartMutation creates new mutation for the MarketChart entity.
func newMarketChartMutation(c config, op Op, opts ...marketchartOption) *MarketChartMutation {
	m := &MarketChartMutation{
		config:        c,
		op:            op,
		typ:           TypeMarketChart,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMarketChartID sets the ID field of the mutation.
func withMarketChartID(id uuid.UUID) marketchartOption {
	return func(m *MarketChartMutation) {
		var (
			err   error
			once  sync.Once
			value *MarketChart
		)
		m.oldValue = func(ctx context.Context) (*MarketChart, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MarketChart.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMarketChart sets the old MarketChart of the mutation.
func withMarketChart(node *MarketChart) marketchartOption {
	return func(m *MarketChartMutation) {
		m.oldValue = func(context.Context) (*MarketChart, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MarketChartMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MarketChartMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MarketChart entities.
func (m *MarketChartMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MarketChartMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *MarketChartMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MarketChartMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the MarketChart entity.
// If the MarketChart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketChartMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MarketChartMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MarketChartMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MarketChartMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the MarketChart entity.
// If the MarketChart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketChartMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MarketChartMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *MarketChartMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MarketChartMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MarketChart entity.
// If the MarketChart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketChartMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MarketChartMutation) ResetName() {
	m.name = nil
}

// SetCurrency sets the "currency" field.
func (m *MarketChartMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *MarketChartMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the MarketChart entity.
// If the MarketChart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketChartMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *MarketChartMutation) ResetCurrency() {
	m.currency = nil
}

// SetChart sets the "chart" field.
func (m *MarketChartMutation) SetChart(cc common.MarketChart) {
	m.chart = &cc
}

// Chart returns the value of the "chart" field in the mutation.
func (m *MarketChartMutation) Chart() (r common.MarketChart, exists bool) {
	v := m.chart
	if v == nil {
		return
	}
	return *v, true
}

// OldChart returns the old "chart" field's value of the MarketChart entity.
// If the MarketChart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketChartMutation) OldChart(ctx context.Context) (v common.MarketChart, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChart: %w", err)
	}
	return oldValue.Chart, nil
}

// ResetChart resets all changes to the "chart" field.
func (m *MarketChartMutation) ResetChart() {
	m.chart = nil
}

// Where appends a list predicates to the MarketChartMutation builder.
func (m *MarketChartMutation) Where(ps ...predicate.MarketChart) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MarketChartMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MarketChart).
func (m *MarketChartMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MarketChartMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, marketchart.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, marketchart.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, marketchart.FieldName)
	}
	if m.currency != nil {
		fields = append(fields, marketchart.FieldCurrency)
	}
	if m.chart != nil {
		fields = append(fields, marketchart.FieldChart)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MarketChartMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case marketchart.FieldCreateTime:
		return m.CreateTime()
	case marketchart.FieldUpdateTime:
		return m.UpdateTime()
	case marketchart.FieldName:
		return m.Name()
	case marketchart.FieldCurrency:
		return m.Currency()
	case marketchart.FieldChart:
		return m.Chart()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MarketChartMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case marketchart.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case marketchart.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case marketchart.FieldName:
		return m.OldName(ctx)
	case marketchart.FieldCurrency:
		return m.OldCurrency(ctx)
	case marketchart.FieldChart:
		return m.OldChart(ctx)
	}
	return nil, fmt.Errorf("unknown MarketChart field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketChartMutation) SetField(name string, value ent.Value) error {
	switch name {
	case marketchart.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case marketchart.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case marketchart.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case marketchart.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case marketchart.FieldChart:
		v, ok := value.(common.MarketChart)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChart(v)
		return nil
	}
	return fmt.Errorf("unknown MarketChart field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MarketChartMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MarketChartMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketChartMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MarketChart numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MarketChartMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MarketChartMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MarketChartMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MarketChart nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MarketChartMutation) ResetField(name string) error {
	switch name {
	case marketchart.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case marketchart.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case marketchart.FieldName:
		m.ResetName()
		return nil
	case marketchart.FieldCurrency:
		m.ResetCurrency()
		return nil
	case marketchart.FieldChart:
		m.ResetChart()
		return nil
	}
	return fmt.Errorf("unknown MarketChart field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MarketChartMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MarketChartMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MarketChartMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MarketChartMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MarketChartMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MarketChartMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MarketChartMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MarketChart unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MarketChartMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MarketChart edge %s", name)
}

// MarketsMutation represents an operation that mutates the Markets nodes in the graph.
type MarketsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	markets       *[]*common.Market
	time          *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Markets, error)
	predicates    []predicate.Markets
}

var _ ent.Mutation = (*MarketsMutation)(nil)

// marketsOption allows management of the mutation configuration using functional options.
type marketsOption func(*MarketsMutation)

// newMarketsMutation creates new mutation for the Markets entity.
func newMarketsMutation(c config, op Op, opts ...marketsOption) *MarketsMutation {
	m := &MarketsMutation{
		config:        c,
		op:            op,
		typ:           TypeMarkets,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMarketsID sets the ID field of the mutation.
func withMarketsID(id uuid.UUID) marketsOption {
	return func(m *MarketsMutation) {
		var (
			err   error
			once  sync.Once
			value *Markets
		)
		m.oldValue = func(ctx context.Context) (*Markets, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Markets.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMarkets sets the old Markets of the mutation.
func withMarkets(node *Markets) marketsOption {
	return func(m *MarketsMutation) {
		m.oldValue = func(context.Context) (*Markets, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MarketsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MarketsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Markets entities.
func (m *MarketsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MarketsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *MarketsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MarketsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Markets entity.
// If the Markets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MarketsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MarketsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MarketsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Markets entity.
// If the Markets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MarketsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetMarkets sets the "markets" field.
func (m *MarketsMutation) SetMarkets(c []*common.Market) {
	m.markets = &c
}

// Markets returns the value of the "markets" field in the mutation.
func (m *MarketsMutation) Markets() (r []*common.Market, exists bool) {
	v := m.markets
	if v == nil {
		return
	}
	return *v, true
}

// OldMarkets returns the old "markets" field's value of the Markets entity.
// If the Markets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketsMutation) OldMarkets(ctx context.Context) (v []*common.Market, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarkets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarkets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarkets: %w", err)
	}
	return oldValue.Markets, nil
}

// ResetMarkets resets all changes to the "markets" field.
func (m *MarketsMutation) ResetMarkets() {
	m.markets = nil
}

// SetTime sets the "time" field.
func (m *MarketsMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *MarketsMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Markets entity.
// If the Markets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketsMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *MarketsMutation) ResetTime() {
	m.time = nil
}

// Where appends a list predicates to the MarketsMutation builder.
func (m *MarketsMutation) Where(ps ...predicate.Markets) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MarketsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Markets).
func (m *MarketsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MarketsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, markets.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, markets.FieldUpdateTime)
	}
	if m.markets != nil {
		fields = append(fields, markets.FieldMarkets)
	}
	if m.time != nil {
		fields = append(fields, markets.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MarketsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case markets.FieldCreateTime:
		return m.CreateTime()
	case markets.FieldUpdateTime:
		return m.UpdateTime()
	case markets.FieldMarkets:
		return m.Markets()
	case markets.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MarketsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case markets.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case markets.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case markets.FieldMarkets:
		return m.OldMarkets(ctx)
	case markets.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown Markets field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case markets.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case markets.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case markets.FieldMarkets:
		v, ok := value.([]*common.Market)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarkets(v)
		return nil
	case markets.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown Markets field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MarketsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MarketsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Markets numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MarketsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MarketsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MarketsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Markets nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MarketsMutation) ResetField(name string) error {
	switch name {
	case markets.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case markets.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case markets.FieldMarkets:
		m.ResetMarkets()
		return nil
	case markets.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown Markets field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MarketsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MarketsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MarketsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MarketsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MarketsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MarketsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MarketsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Markets unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MarketsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Markets edge %s", name)
}
