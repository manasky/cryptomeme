// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"cryptolist/common"
	"cryptolist/internal/ent/marketchart"
	"cryptolist/internal/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketChartUpdate is the builder for updating MarketChart entities.
type MarketChartUpdate struct {
	config
	hooks    []Hook
	mutation *MarketChartMutation
}

// Where appends a list predicates to the MarketChartUpdate builder.
func (mcu *MarketChartUpdate) Where(ps ...predicate.MarketChart) *MarketChartUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetName sets the "name" field.
func (mcu *MarketChartUpdate) SetName(s string) *MarketChartUpdate {
	mcu.mutation.SetName(s)
	return mcu
}

// SetCurrency sets the "currency" field.
func (mcu *MarketChartUpdate) SetCurrency(s string) *MarketChartUpdate {
	mcu.mutation.SetCurrency(s)
	return mcu
}

// SetChart sets the "chart" field.
func (mcu *MarketChartUpdate) SetChart(cc common.MarketChart) *MarketChartUpdate {
	mcu.mutation.SetChart(cc)
	return mcu
}

// Mutation returns the MarketChartMutation object of the builder.
func (mcu *MarketChartUpdate) Mutation() *MarketChartMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MarketChartUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mcu.defaults()
	if len(mcu.hooks) == 0 {
		affected, err = mcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketChartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcu.mutation = mutation
			affected, err = mcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mcu.hooks) - 1; i >= 0; i-- {
			if mcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MarketChartUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MarketChartUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MarketChartUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcu *MarketChartUpdate) defaults() {
	if _, ok := mcu.mutation.UpdateTime(); !ok {
		v := marketchart.UpdateDefaultUpdateTime()
		mcu.mutation.SetUpdateTime(v)
	}
}

func (mcu *MarketChartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   marketchart.Table,
			Columns: marketchart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: marketchart.FieldID,
			},
		},
	}
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: marketchart.FieldUpdateTime,
		})
	}
	if value, ok := mcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marketchart.FieldName,
		})
	}
	if value, ok := mcu.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marketchart.FieldCurrency,
		})
	}
	if value, ok := mcu.mutation.Chart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: marketchart.FieldChart,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{marketchart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MarketChartUpdateOne is the builder for updating a single MarketChart entity.
type MarketChartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MarketChartMutation
}

// SetName sets the "name" field.
func (mcuo *MarketChartUpdateOne) SetName(s string) *MarketChartUpdateOne {
	mcuo.mutation.SetName(s)
	return mcuo
}

// SetCurrency sets the "currency" field.
func (mcuo *MarketChartUpdateOne) SetCurrency(s string) *MarketChartUpdateOne {
	mcuo.mutation.SetCurrency(s)
	return mcuo
}

// SetChart sets the "chart" field.
func (mcuo *MarketChartUpdateOne) SetChart(cc common.MarketChart) *MarketChartUpdateOne {
	mcuo.mutation.SetChart(cc)
	return mcuo
}

// Mutation returns the MarketChartMutation object of the builder.
func (mcuo *MarketChartUpdateOne) Mutation() *MarketChartMutation {
	return mcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MarketChartUpdateOne) Select(field string, fields ...string) *MarketChartUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MarketChart entity.
func (mcuo *MarketChartUpdateOne) Save(ctx context.Context) (*MarketChart, error) {
	var (
		err  error
		node *MarketChart
	)
	mcuo.defaults()
	if len(mcuo.hooks) == 0 {
		node, err = mcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketChartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcuo.mutation = mutation
			node, err = mcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mcuo.hooks) - 1; i >= 0; i-- {
			if mcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MarketChartUpdateOne) SaveX(ctx context.Context) *MarketChart {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MarketChartUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MarketChartUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcuo *MarketChartUpdateOne) defaults() {
	if _, ok := mcuo.mutation.UpdateTime(); !ok {
		v := marketchart.UpdateDefaultUpdateTime()
		mcuo.mutation.SetUpdateTime(v)
	}
}

func (mcuo *MarketChartUpdateOne) sqlSave(ctx context.Context) (_node *MarketChart, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   marketchart.Table,
			Columns: marketchart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: marketchart.FieldID,
			},
		},
	}
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MarketChart.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, marketchart.FieldID)
		for _, f := range fields {
			if !marketchart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != marketchart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: marketchart.FieldUpdateTime,
		})
	}
	if value, ok := mcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marketchart.FieldName,
		})
	}
	if value, ok := mcuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: marketchart.FieldCurrency,
		})
	}
	if value, ok := mcuo.mutation.Chart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: marketchart.FieldChart,
		})
	}
	_node = &MarketChart{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{marketchart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
