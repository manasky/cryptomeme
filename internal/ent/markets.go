// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/manasky/cryptomeme/common"
	"github.com/manasky/cryptomeme/internal/ent/markets"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Markets is the model entity for the Markets schema.
type Markets struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Markets holds the value of the "markets" field.
	Markets []*common.Market `json:"markets,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Markets) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case markets.FieldMarkets:
			values[i] = new([]byte)
		case markets.FieldCreateTime, markets.FieldUpdateTime, markets.FieldTime:
			values[i] = new(sql.NullTime)
		case markets.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Markets", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Markets fields.
func (m *Markets) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case markets.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case markets.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case markets.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case markets.FieldMarkets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field markets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Markets); err != nil {
					return fmt.Errorf("unmarshal field markets: %w", err)
				}
			}
		case markets.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				m.Time = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Markets.
// Note that you need to call Markets.Unwrap() before calling this method if this Markets
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Markets) Update() *MarketsUpdateOne {
	return (&MarketsClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Markets entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Markets) Unwrap() *Markets {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Markets is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Markets) String() string {
	var builder strings.Builder
	builder.WriteString("Markets(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", markets=")
	builder.WriteString(fmt.Sprintf("%v", m.Markets))
	builder.WriteString(", time=")
	builder.WriteString(m.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MarketsSlice is a parsable slice of Markets.
type MarketsSlice []*Markets

func (m MarketsSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
